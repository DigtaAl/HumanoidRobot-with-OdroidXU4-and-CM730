#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include "opencv2/opencv.hpp"


#include <iostream>
#include <fstream>
#include <ostream>
#include <unistd.h>

using namespace std;
using namespace cv;
 
 int lowH = 60;       // Set Hue
 int highH = 100;

 int lowS = 111;       // Set Saturation
 int highS = 203;

 int lowV = 39;       // Set Value
 int highV = 163;
	 
 int erotion_size = 0;
 int dilation_size = 0; 
	
bool posisi;
 double 	posX;
 double 	posY;

void save()
{
	ofstream saveFile;
	saveFile.open("data_kalibrasi.txt");
    
    saveFile << lowH << endl;
    saveFile << highH << endl;
    saveFile << lowS << endl;
    saveFile << highS << endl;
    saveFile << lowV << endl;
    saveFile << highV << endl;
    saveFile << erotion_size << endl;
    saveFile << dilation_size << endl;
	
    cout << "                        Berhasil menyimpan nilai kalibrasi" << endl;
    saveFile.close();    
}

void load()
{
	ifstream loadFile;
   
    loadFile.open ("data_kalibrasi.txt");
	
	loadFile >> lowH;
	loadFile >> highH;
	loadFile >> lowS;
	loadFile >> highS;
	loadFile >> lowV;
	loadFile >> highV;
	loadFile >> erotion_size;
	loadFile >> dilation_size;
    
    cout << "                          Berhasil memuat data kalibrasi" << endl;
    loadFile.close();
}



int main () 
{
           
     cout << "\n------------------------Program Kalibrasi Al-Aadiyaat v1.0----------------------" << endl;
     cout << "----------------------------------by lukasganteng-------------------------------\n" << endl;
    
 load();
 const int width = 320; // ukuran lebar jendela
 const int height = 280;// ukuran tinggi jendela

 cv::VideoCapture capWebcam(0);  

 /*Setingan parameter kamera*/
 capWebcam.set(CV_CAP_PROP_FRAME_WIDTH,width);
 capWebcam.set(CV_CAP_PROP_FRAME_HEIGHT,height);
 
 if (capWebcam.isOpened() == false)  
 {    
  std::cout << "eror: Koneksi webcam gagal\n"; 
  return(0);            
 }

 cv::Mat imgOriginal;  
 cv::Mat hsvImg;
 cv::Mat threshImg;
  
 std::vector<cv::Vec3f> v3fCircles;	 
 char keyboard = 0;
 
 while (keyboard != 27 && capWebcam.isOpened()) 
 {    
 bool blnFrameReadSuccessfully = capWebcam.read(imgOriginal);  

  if (!blnFrameReadSuccessfully || imgOriginal.empty()) 
  {    
  std::cout << "eror: sambungan kamera terputus, hubungkan kembali usb \n";      
   break;               
  }
  
   cv::cvtColor(imgOriginal, hsvImg, CV_BGR2HSV);      // Convert Original Image to HSV Thresh Image

			  cv::inRange(hsvImg, cv::Scalar(lowH, lowS, lowV), cv::Scalar(highH, highS, highV), threshImg);

			 // cv::GaussianBlur(threshImg, threshImg, cv::Size(3, 3), 0);   //Blur Effect
			   
			 //morphologi opening
			  Mat element = getStructuringElement(cv::MORPH_ELLIPSE,
              cv::Size(2 * erotion_size + 1, 2 * erotion_size + 1),
              cv::Point(erotion_size, erotion_size) );
				//erode(threshImg,threshImg,element1);
				morphologyEx(threshImg,threshImg,2,element);
			
			//morphologi closing
			Mat element1 = getStructuringElement(cv::MORPH_ELLIPSE,
              cv::Size(2 * dilation_size + 1, 2 * dilation_size + 1),
              cv::Point(dilation_size, dilation_size) );
			  //dilate(threshImg,threshImg,element);
			  morphologyEx(threshImg,threshImg,3,element1);
			  
			   							
				int largest_area=0;
				int largest_contour_index=0;
				Rect bounding_rect;
				vector<vector<Point> > contours; // Vector for storing contour
				vector<Vec4i> hierarchy;
				findContours( threshImg, contours, hierarchy,CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE );
				vector<Moments> mu(contours.size()); //get moments
				
				
				for (int i = 0; i < contours.size(); i++)
				{
					mu[i] = moments(contours[i], false);
				}

				vector<Point> mc(contours.size()); //get centers
				for (int i = 0; i < contours.size(); i++)
				{
					mc[i] = Point2f(mu[i].m10 / mu[i].m00, mu[i].m01 / mu[i].m00);
				}

								
				// iterate through each contour.
				for( int i = 0; i< contours.size(); i++ )
				{
					//  Find the area of contour
					double a=contourArea( contours[i],false); 
					if(a>largest_area){
						largest_area=a;
						// Store the index of largest contour
						largest_contour_index=i;               
						// Find the bounding rectangle for biggest contour
						bounding_rect=boundingRect(contours[i]);
						
						// coordinates of centroid
						posX = mu[i].m10 / mu[i].m00;
						posY = mu[i].m01 / mu[i].m00;
						
						
						//cout<< Mat(mc)<< endl;	
						//cout<<"objek x :"<<posX<<endl;
						//cout<<"objek y :"<<posY<<endl;			
								
						
					}
				}
				
			               
				
				Scalar color( 255,255,255);  
				//Draw the contour and rectangle
				drawContours( threshImg, contours,largest_contour_index, color, CV_FILLED,8,hierarchy);
				rectangle(imgOriginal, bounding_rect,  Scalar(0,255,0),2, 8,0); 
				//circle(imgOriginal, mc[largest_contour_index],4 , CV_RGB(255, 255, 0), -1, 8, 0);
			 
			 
			  // declare windows
			  cv::namedWindow("imgOriginal", CV_WINDOW_AUTOSIZE);
			  cv::namedWindow("threshImg", CV_WINDOW_AUTOSIZE); 

				 /* Create trackbars in "threshImg" window to adjust according to object and environment.*/
			  cv::createTrackbar("LowH", "threshImg", &lowH, 179); //Hue (0 - 179)
			  cv::createTrackbar("HighH", "threshImg", &highH, 179);

			  cv::createTrackbar("LowS", "threshImg", &lowS, 255); //Saturation (0 - 255)
			  cv::createTrackbar("HighS", "threshImg", &highS, 255);
  
			  cv::createTrackbar("LowV", "threshImg", &lowV, 255); //Value (0 - 255)
			  cv::createTrackbar("HighV", "threshImg", &highV, 255);
			  
			  cv::createTrackbar("opening", "threshImg", &erotion_size, 255);
			  cv::createTrackbar("closing", "threshImg", &dilation_size, 255);
				
				
			 cv::imshow("imgOriginal", imgOriginal);     // show windows
			 cv::imshow("threshImg", threshImg);
  
  keyboard = cv::waitKey(1);    

     
    // cv::namedWindow("threshImg", CV_WINDOW_AUTOSIZE);
    // cv::createTrackbar("LowH", "threshImg", &nilai, 179);
    // cv::imshow("threshImg", threshImg);
    
 }
    save();
    return 0;
}
